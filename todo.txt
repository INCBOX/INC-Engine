BUILD INC ENGINE FOR LINUX USING (WSL2 + Ubuntu 22.04) on WIN1064

engine.cpp move engine_render related codes to engine_render


	IMPROVE ENGINE GLOBALS.. OR GET RID OF IT?..
	
	
[MED] IGPUMesh forward declaration error in static_mesh_loader.cpp
    - WHY: Using incomplete type prevents method calls and unique_ptr usage.
    - ACTION: Include actual definition, not just forward declare.

[LOW] Clean up g_StarfieldMesh lifetime
    - WHY: Linker error due to undefined symbol.
    - ACTION: Define it in mesh_primitives.cpp, declare properly in a header.
	
	
	
	
	
üß† ENGINE.CPP MODULARIZATION REMINDER
To move rendering out of engine.cpp, do this:

Remove all direct GPU calls (BeginFrame, Render, EndFrame) from Engine_RunFrame()
Call Renderer_RunFrame(deltaTime) instead
In Renderer_RunFrame() (inside engine_renderer.cpp):
Handle BeginFrame(), PrepareFrame()
Call StarfieldRenderer, PlanetRenderer, Map::DrawStaticGeometry
End with EndFrame()
Keep engine.cpp focused on input, camera, and player ‚Äî not rendering.


Modular Engine To-Do ‚Äî Short Version
Extract Renderer: Move all GPU and draw calls to engine_renderer.cpp
Create Renderer API: Provide Renderer_Init(), Renderer_RunFrame(), Renderer_Shutdown()
Keep engine.cpp: Handle input, camera, player, game logic only
Plan Next: Modularize Audio, Movement, Game Logic next ‚Äî separate each subsystem with clear APIs
Debug: When visuals break, check only renderer; when logic breaks, check engine/game files

example
void Host_Frame(float deltaTime) {
    HandleInput();
    UpdateGameLogic(deltaTime);
    UpdatePhysics(deltaTime);
    UpdateAI(deltaTime);
    RenderFrame();
    UpdateAudio();
    SyncNetworking();
}


DONE KINDA!
---------------
1 Modular Precision System MATHLIB modular 
Next-Level: Optional precision layer macro
mathlib_precision.h
convert_utils.h

2 Double-Precision Camera System with floating-origin - Camera_f and Camera_d
Goal: Eliminate float precision errors when the player/camera is millions of units from origin.

	- Camera_d moves through real world (light-years, kilometers)
	- CameraManager computes offset from that
	- Camera_f is locked to (0,0,0) or local offset and used for gameplay
	- All rendering systems use CameraManager::GetWorldCamera() for global visuals, and CameraManager::GetLocalCamera() for gameplay visuals

CameraManager 
	Floating origin system
	Keep your local scene centered near 0,0,0, while rendering based on real planetary/starlight coordinates
	Starfield with true parallax

	A high-precision Camera_d for world
	A float Camera_f for gameplay
	- Player‚Äôs transform must use Vector3_d

IMPORTANT: need to sync camera_d ‚Üí camera_f

---------------

Optional: Floating Origin Support (Star Citizen-style)


Star Citizen‚ÄìStyle Starfield To-Do List
Phase 1: Foundation ‚Äî Real 3D Starfield With Double Precision
Star Data Generation
Generate thousands of stars with double-precision Vector3_d positions randomly distributed in a spherical volume around the origin.
Assign each star a brightness and color (optional).
Camera-relative Positioning & Culling
Each frame, subtract the double-precision camera position from star positions ‚Üí get local positions near zero.
Cull stars outside a set max distance or frustum to reduce GPU load.
Upload Star Positions to GPU
Convert local double-precision star positions to float.
Upload positions (and brightness/color) as a dynamic VBO for point rendering.
Point Sprite Shader
Write GLSL vertex+fragment shaders that render each point as a glowing star sprite.
Use time uniform to add twinkling flicker effect.
Render Star Points
Disable depth writes and optionally depth test for stars.
Draw stars as GL_POINTS with the shader.
Phase 2: Quality & Performance Enhancements
Layered Starfields
Implement multiple star layers with different distances for parallax effect (near, mid, far).
Procedural Galaxy & Nebula Background
Add procedural 3D noise textures for nebula colors behind stars.
Blend nebula layers with stars with alpha blending.
Brightness Falloff & Star Types
Implement physically accurate brightness falloff based on star distance.
Color tint stars by spectral type (blue, yellow, red, etc).
Efficient Spatial Partitioning
Use spatial data structures (e.g., octree) to quickly cull and select visible stars for rendering.
Optimizations
Use instanced rendering or indirect draw calls for millions of stars.
Minimize CPU-GPU sync by buffering star data smartly.

Phase 3: Polish & Advanced Effects
Star Twinkle & Flicker
Improve twinkle with noise-based or procedural flickering shaders.
Depth Sorting & Nebula Layers
Implement depth sorting for blending nebulae behind stars.
Dynamic Starfield Elements
Add moving or variable brightness stars.
Add shooting stars or comets.

Cross-API Porting
Prepare rendering abstraction for Vulkan and DirectX backends.
Tooling & Content Pipeline
Develop starfield editing/generation tools for designers.

Bonus: Extras to Feel Star Citizen-Level
Use physically based rendering for star glows.
Add star flares and lens effects.
Implement galaxy spiral arms procedural placement.
Real-time star catalog import from astronomy data.








Procedural starfield + nebula background (shader).
Procedural Starfield System
Once the camera works at double-precision:
Use Vector3_d for star positions (thousands to millions)
Stars only render if they're within camera culling bounds
You render them relative to camera origin, and feed float version to GPU
Use a point sprite shader, no geometry, millions of stars with zero overdraw
-------------

‚ú® STARFIELD ‚Äì Ongoing Improvements
- [ ] Add procedural 3D star layout (not just background)
- [ ] Implement parallax and camera-relative depth logic
- [ ] Physically accurate star brightness + distance falloff
- [ ] Support millions of stars with zero overdraw
- [ ] Optional: Depth layers (e.g., nebula behind star layer)

dynamic 3D stars with true parallax
physically accurate brightness falloff over light-years
procedural galaxy noise, color tinting, and depth layering
camera-relative rendering to eliminate float precision errors
millions of stars at zero performance cost
üöÄ Star Citizen‚ÄìStyle Starfield: Goals
You‚Äôre not looking for a bokeh blobfield ‚Äî you‚Äôre aiming for this:
Infinite starfield with real spatial layout
Zero overdraw & fast rendering, even with 10,000+ stars
Sharp, twinkling point stars
Parallax with camera movement
Depth sorting (optional: far nebula behind stars)





Step 2: Sector-based space chunking for object management.
Step 3: Procedural planets, dynamic props, etc.


üöÄ INC Planetary Engine ‚Äì High-Fidelity TODO List

‚úÖ PHASE 0 ‚Äì Foundations (already partially done)
- [x] Implement double-precision `Vector3_d` and `Matrix4x4_d`
- [x] Add camera-relative rendering system to eliminate float errors
- [x] Create working `GLStarfieldRenderer` API and render pass
- [x] Replace map‚Äôs static geometry with floating planets/spheres

ü™ê PHASE 1 ‚Äì Planet System Runtime Replacement
- [ ] Remove JSON-defined planets from level system
- [ ] Create `PlanetSystem` class to manage all planets
- [ ] Implement `Planet` class with:
  - [ ] `Vector3_d position`
  - [ ] `double radius`
  - [ ] `uint32_t seed`
  - [ ] Optional: biome or material parameters
- [ ] Create engine-side registration like:
  PlanetSystem::RegisterPlanet("earth", 6371.0, Vector3_d(1e6, 0, 0), 1234);


		
		Your To-Do Breakdown:
		Task	Module	Status
		Double precision mathlib (Vector3_d, Matrix4x4_d)	mathlib	Done
		Refactor Camera to Camera_d	camera_d.h/.cpp	Needs rewrite
		Add world-space to render-space logic	RenderTransformSystem	Needs implementation
		Update render system to use float model matrices	PlanetRenderer, EntityRenderer	WIP
		Add streaming LOD based on camera.worldPosition	StreamingManager, PlanetLODSystem	Co
		
		üêâ The Dragon: Parented Transforms
		If you want characters moving inside ships (that move through space), you‚Äôll have to support:
		local transforms (float, relative to parent)
		world transforms (double, absolute in space)
		Proper update chains: parent rebasing updates children
		You ready for that? Or should we just glue everyone to asteroids and pretend ships don‚Äôt move?








üåç PHASE 2 ‚Äì Planet Rendering and LOD System
- [ ] Create basic `PlanetRenderer` class (one per planet)
- [ ] Use UV sphere mesh or cube-sphere for test planet
- [ ] Implement `PlanetLODNode` with:
  - [ ] Frustum culling
  - [ ] Distance-based LOD switching
  - [ ] Chunk generation requests
- [ ] Begin `PlanetChunk` system with LOD mesh generation

üåÑ PHASE 3 ‚Äì Terrain Generation System
- [ ] Create terrain generator backend:
  - [ ] Perlin or Simplex noise-based height generation
  - [ ] Optional: heightmap support
- [ ] Patch-level procedural generation tied to `PlanetChunk`
- [ ] Implement async terrain generation jobs (threaded)

üåå PHASE 4 ‚Äì Visuals & Physics Integration
- [ ] Add realistic lighting and shading to terrain patches
- [ ] Add atmosphere rendering (optional)
- [ ] Add planetary gravity wells that affect players and entities
- [ ] Link physics to planetary surface for walking/flying
- [ ] Handle collision + landing on planets


üß† FUTURE (after planetary system is stable)
- [ ] Galaxy map & fast travel
- [ ] Surface biome blending system
- [ ] Landing zones and surface POIs
- [ ] Dynamic weather on planets
- [ ] Atmospheric entry VFX








üöÄ High-Fidelity Simulation (what Star Citizen uses)
This is what you‚Äôre trying to move toward:

Feature	Description
Procedural + data-driven	Planets are defined by seeds, materials, atmospheres, gravity ‚Äî not just geometry
Origin shifting / camera-relative	Keeps precision high by offsetting world instead of camera
LOD terrain streaming	Patches load in chunks as player approaches
Patch-based simulation	Surface sim, physics, weather are all done per-tile
Massive scale	1:1 scale planets, moons, stations
Example	Star Citizen, Outerra, Elite Dangerous

üéØ What Star Citizen Actually Uses
Proprietary binary formats (.zone, .entity, etc.)

Procedural terrain with runtime LOD generation

Planet definitions via parameterized assets (like planet_data.xml, not JSON geometry)

Each planet: procedural seed, radius, material layers, gravity, atmosphere params

Level editor is only used for space stations or interiors ‚Äî not planetary layout













/////////////////////
Star Citizen Style Engine: Ultra-Short Must-Have Checklist
1. MathLib (Core Precision)
Vector3_d, Matrix4x4_d (double precision)

Vector3_f, Matrix4x4_f (float precision)

Conversion functions ToFloat(), ToDouble()

AABB_d, Frustum_d for culling

Quaternion and Transform types in double precision

2. Floating Origin System
Store all world positions in Vector3_d

Subtract camera position Vector3_d from entities each frame

Convert resulting local positions to Vector3_f for rendering

3. Renderer
Accepts only float-precision positions for rendering

Uses floating origin-adjusted positions to avoid precision loss

Supports point/star rendering with large-scale offsets

Frustum culling in double precision before converting to float

4. Scene & Entity System
Entities keep Transform_d (double precision world transform)

Sync double precision transform to float precision transform for renderer each frame

Support LOD systems that use distance in double precision

5. Terrain & Planet System
Streaming terrain chunks with world origin in double precision

Terrain mesh vertices are float precision relative to chunk origin

Async patch loading/unloading

6. Physics & Movement
Physics simulation in double precision near planets/large scales

Gravity wells computed with double precision vectors

Player movement synchronized with floating origin

7. Streaming & LOD
Async streaming of terrain and entities

Distance-based LOD calculated using double precision distances

Efficient culling and draw calls batching

