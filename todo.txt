

	Step 1: Procedural starfield + nebula background (shader or skybox).
	
	Step 2: Sector-based space chunking for object management.
	
	Step 3: Procedural planets, dynamic props, etc.
	
	
	
[HIGH] ShaderAPI header restructure
    - WHY: Current header includes are causing `Matrix4x4_f` / `mat4_f` mismatch.
    - ACTION: Decide on unified matrix type or proper shared mathlib location.
    - FILES: ishaderapi.h, engine.cpp, shaderapi_gl.*

[MED] IGeometry forward declaration error in static_mesh_loader.cpp
    - WHY: Using incomplete type prevents method calls and unique_ptr usage.
    - ACTION: Include actual definition, not just forward declare.

[LOW] Clean up g_StarfieldMesh lifetime
    - WHY: Linker error due to undefined symbol.
    - ACTION: Define it in mesh_primitives.cpp, declare properly in a header.



Star Citizen gives you:

dynamic 3D stars with true parallax

physically accurate brightness falloff over light-years

procedural galaxy noise, color tinting, and depth layering

camera-relative rendering to eliminate float precision errors

millions of stars at zero performance cost

ðŸš€ Star Citizenâ€“Style Starfield: Goals
Youâ€™re not looking for a bokeh blobfield â€” youâ€™re aiming for this:

Infinite starfield with real spatial layout

Zero overdraw & fast rendering, even with 10,000+ stars

Sharp, twinkling point stars

Parallax with camera movement

Depth sorting (optional: far nebula behind stars)