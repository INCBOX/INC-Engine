// main.cpp â€” INC Launcher (Source-style, cross-platform)

#include <iostream>
#include <string>
#include <filesystem>
#include <thread>
#include <chrono>

#if defined(_WIN32)
    #include <Windows.h>
    typedef bool (__stdcall *FnBool)();          // Engine_RunFrame returns bool to continue loop
    typedef void (__stdcall *FnVoid)();
#elif defined(__APPLE__)
    #include <mach-o/dyld.h>
    #include <dlfcn.h>
    typedef bool (*FnBool)();
    typedef void (*FnVoid)();
#else
    #include <unistd.h>
    #include <limits.h>
    #include <dlfcn.h>
    typedef bool (*FnBool)();
    typedef void (*FnVoid)();
#endif

static FnVoid Engine_Init = nullptr;
static FnBool Engine_RunFrame = nullptr;
static FnVoid Engine_Shutdown = nullptr;

#if defined(_WIN32)
    static HMODULE g_engineLib = nullptr;
#else
    static void* g_engineLib = nullptr;
#endif

// Get executable directory cross-platform
std::string GetExeDir() {
#if defined(_WIN32)
    char exePath[MAX_PATH];
    if (!GetModuleFileNameA(NULL, exePath, MAX_PATH)) {
        std::cerr << "[Launcher] GetModuleFileNameA failed\n";
        return "";
    }
    return std::filesystem::path(exePath).parent_path().string();

#elif defined(__APPLE__)
    char exePath[1024];
    uint32_t size = sizeof(exePath);
    if (_NSGetExecutablePath(exePath, &size) != 0) {
        std::cerr << "[Launcher] _NSGetExecutablePath buffer too small\n";
        return "";
    }
    return std::filesystem::path(exePath).parent_path().string();

#else // Linux
    char exePath[PATH_MAX];
    ssize_t len = readlink("/proc/self/exe", exePath, sizeof(exePath)-1);
    if (len == -1) {
        std::cerr << "[Launcher] readlink /proc/self/exe failed\n";
        return "";
    }
    exePath[len] = '\0';
    return std::filesystem::path(exePath).parent_path().string();
#endif
}

bool LoadEngineLibrary() {
    std::string exeDir = GetExeDir();
    if (exeDir.empty()) {
        std::cerr << "[Launcher] Failed to get executable directory\n";
        return false;
    }

    std::string binDir = exeDir + ( (exeDir.back() == '/' || exeDir.back() == '\\') ? "" : std::string(1, std::filesystem::path::preferred_separator) ) + "bin";
    std::string enginePath;

#if defined(_WIN32)
    // Set DLL directory for dependencies
    if (!SetDllDirectoryA(binDir.c_str())) {
        std::cerr << "[Launcher] Failed to set DLL directory to " << binDir << "\n";
        return false;
    }

    enginePath = binDir + "\\engine.dll";

    g_engineLib = LoadLibraryExA(enginePath.c_str(), NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
    if (!g_engineLib) {
        std::cerr << "[Launcher] Failed to load " << enginePath << "\n";
        return false;
    }

    Engine_Init = (FnVoid)GetProcAddress(g_engineLib, "Engine_Init");
    Engine_RunFrame = (FnBool)GetProcAddress(g_engineLib, "Engine_RunFrame");
    Engine_Shutdown = (FnVoid)GetProcAddress(g_engineLib, "Engine_Shutdown");

#else // Linux/macOS
    #if defined(__APPLE__)
        enginePath = binDir + "/libengine.dylib";
    #else
        enginePath = binDir + "/libengine.so";
    #endif

    g_engineLib = dlopen(enginePath.c_str(), RTLD_NOW);
    if (!g_engineLib) {
        std::cerr << "[Launcher] Failed to load " << enginePath << ": " << dlerror() << "\n";
        return false;
    }

    Engine_Init = (FnVoid)dlsym(g_engineLib, "Engine_Init");
    Engine_RunFrame = (FnBool)dlsym(g_engineLib, "Engine_RunFrame");
    Engine_Shutdown = (FnVoid)dlsym(g_engineLib, "Engine_Shutdown");

#endif

    if (!Engine_Init || !Engine_RunFrame || !Engine_Shutdown) {
        std::cerr << "[Launcher] Failed to bind engine entry points\n";
        return false;
    }

    std::cout << "[Launcher] Engine loaded and entry points bound\n";
    return true;
}

void UnloadEngineLibrary() {
#if defined(_WIN32)
    if (g_engineLib) {
        FreeLibrary(g_engineLib);
        g_engineLib = nullptr;
    }
#else
    if (g_engineLib) {
        dlclose(g_engineLib);
        g_engineLib = nullptr;
    }
#endif

    Engine_Init = nullptr;
    Engine_RunFrame = nullptr;
    Engine_Shutdown = nullptr;
}

int main() {
    std::cout << "[INC Launcher] Starting\n";

    if (!LoadEngineLibrary()) {
        std::cerr << "[Launcher] Could not load engine\n";
        return -1;
    }

    Engine_Init();

    bool running = true;
    while (running) {
        running = Engine_RunFrame();

        // Cap frame rate ~60 FPS
        std::this_thread::sleep_for(std::chrono::milliseconds(16));
    }

    Engine_Shutdown();
    UnloadEngineLibrary();

    std::cout << "[INC Launcher] Exiting cleanly\n";
    return 0;
}