===============================
HEADER PLACEMENT GUIDE
===============================

This guide helps decide where to put header (.h) files in our modular engine project.

---------------------------------
1. Public Headers (`/public`)
---------------------------------
- Contains interfaces, abstract classes, and shared data structures used by multiple modules.
- Must be lightweight and free of platform-specific dependencies.
- Shared contracts and API definitions go here.
- Examples:
  - `shaderapi.h` (interface for shader backends)
  - `imdl_geometry.h` (if used by both engine and filesystem)
  
---------------------------------
2. Engine Module Headers (`/engine`)
---------------------------------
- Contains engine core implementation details, concrete classes, helpers.
- Platform-specific or rendering backend code lives here.
- Internal engine logic that doesn’t need sharing goes here.
- Examples:
  - `shaderapigl.h` (OpenGL shader backend implementation)
  - `engine_renderer.h`

---------------------------------
3. Filesystem Module Headers (`/filesystem`)
---------------------------------
- Contains file loading, resource IO, serialization logic.
- Pure data loading code with no engine/rendering dependencies.
- Examples:
  - `imdl_geometry_loader.h`
  - `filesystem_utils.h`

---------------------------------
4. General Rules
---------------------------------
- If a header is used by multiple modules, put it in `/public`.
- If it’s implementation detail for one module, keep it inside that module folder.
- Avoid putting platform-specific or third-party includes in `/public`.
- Keep `/public` headers as stable API contracts to minimize recompilation.

---------------------------------
5. Common Scenarios
---------------------------------
- Raw model data structures shared between filesystem (loading) and engine (rendering) → `/public`
- Abstract interfaces shared by all rendering backends → `/public`
- Backend-specific code (OpenGL, DirectX) → `/engine`
- File parsers and loaders → `/filesystem`
- Game logic → `/game` (if applicable)

---------------------------------
6. Why?
---------------------------------
- Clear separation improves modularity and compilation speed.
- Prevents cyclic dependencies and inclusion headaches.
- Makes it easier to maintain and extend code.
- Mirrors architecture like Valve’s Source Engine.

---------------------------------
7. Examples
---------------------------------
| Header                     | Suggested Folder  | Notes                             |
|----------------------------|------------------|----------------------------------|
| shaderapi.h                | /public          | Abstract shader interface         |
| imdl_geometry.h            | /public          | Shared model geometry data        |
| imdl_geometry_loader.h     | /filesystem      | Loading/parsing only              |
| shaderapigl.h              | /engine          | OpenGL backend implementation    |
| engine_renderer.h          | /engine          | Core engine rendering logic       |

---

Keep this guide handy for consistent header placement.
