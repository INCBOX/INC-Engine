#include "shaders/gl_rendersystem.h"
#include <glad/glad.h>
#include <iostream>

bool RenderSystemGL::Init(void* windowHandle, int width, int height) {
	m_Window = static_cast<SDL_Window*>(windowHandle);
	m_GLContext = SDL_GL_CreateContext(m_Window);
	if (!m_GLContext) {
		std::cerr << "[GL] Failed to create GL context\n";
		return false;
	}
	if (!gladLoadGLLoader((GLADloadproc)SDL_GL_GetProcAddress)) {
		std::cerr << "[GL] Failed to load GL functions\n";
		return false;
	}
	std::cout << "[GL] OpenGL initialized\n";
	return true;
}

void RenderSystemGL::Shutdown() {
	if (m_GLContext) {
		SDL_GL_DeleteContext(m_GLContext);
		m_GLContext = nullptr;
	}
}

void RenderSystemGL::BeginFrame() {
	glViewport(0, 0, 1280, 720); // You should pass actual size
	glClearColor(0.1f, 0.1f, 0.25f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
}

void RenderSystemGL::EndFrame() {
	SDL_GL_SwapWindow(m_Window);
}

void RenderSystemGL::OnResize(int width, int height) {
	// (Optional) Update viewport or resources
}